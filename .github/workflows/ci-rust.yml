name: CI Rust

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  TVM_HOME: /opt/tvm
  TVM_LIBRARY_PATH: /opt/tvm/lib
  PYTHONPATH: /home/runner/work/tvm/tvm/python
  RUST_BACKTRACE: 1

jobs:
  windows:
    if: ${{ github.repository == 'todalab/tvm' }}
    runs-on: windows-2019
    env:
      LLVM_PATH: D:\a\tvm\opt\llvm
      DOWNLOAD_PATH: D:\a\tvm\download
      TVM_HOME: C:\Miniconda\envs\tvm-build\Library
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Cache libtvm
        id: cache-libtvm
        uses: actions/cache@v4
        with:
          path: ./conda/pkg
          key: ${{ runner.os }}-libtvm-v0.18.0

      - name: Set up environment
        uses: ./.github/actions/setup
      - name: Conda Build
        if: steps.cache-libtvm.outputs.cache-hit != 'true'
        shell: cmd /C call {0}
        run: >-
          conda build --output-folder=conda/pkg conda/recipe
      - run: conda install tvm -c ./conda/pkg
      - run: Get-ChildItem -Path ./conda/pkg -Recurse
      - run: Get-ChildItem -Path C:\Miniconda\envs\tvm-build -Recurse
      - run: Get-ChildItem -Path ./rust -Recurse
      - run: pip install numpy decorator psutil typing_extensions pytest

      - name: tvm-sys test
        run: |
          cd rust
          cargo test -p tvm-sys --verbose
      - name: tvm-rt test
        run: |
          cd rust
          cargo test -p tvm-rt --verbose
      - name: tvm test
        run: |
          cd rust
          cargo test -p tvm --verbose
      - name: basics test
        run: |
          cd rust
          cargo test -p basics --verbose
      - name: callback test
        run: |
          cd rust
          cargo test -p callback --verbose
      - name: macros test
        run: |
          cd rust
          cargo test -p tvm-macros --verbose
      - name: compiler-ext test
        run: |
          cd rust
          cargo test -p compiler-ext --verbose --features "tvm/python tvm/dynamic-linking"      
      - name: tvm-graph-rt test
        shell: cmd /C call {0}
        run: |
          cd rust
          cargo build
          cargo test -p tvm-graph-rt --verbose
      # unsupported windows
      # - name: test-rt-tvm-basic test
      #   shell: cmd /C call {0}
      #   run: |
      #     cd rust
      #     cargo test -p test-rt-tvm-basic --verbose
      - name: test-rt-tvm-dso test
        shell: cmd /C call {0}
        run: |
          cd rust
          cargo test -p test-rt-tvm-dso --verbose
      # unsupported windows
      # - name: test-rt-nn test
      #   shell: cmd /C call {0}
      #   run: |
      #     cd rust
      #     cargo test -p test-rt-nn --verbose
      # - name: test-rt-wasm32 test
      #   run: |
      #     cd rust
      #     export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
      #     export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
      #     cargo test -p test-rt-wasm32 --verbose

  linux:
    if: ${{ github.repository == 'todalab/tvm' }}
    runs-on: Ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install llvm, libncurses5-dev
        run: |
           sudo apt-get install -y libtinfo5 llvm

      - name: Cache libtvm
        id: cache-libtvm
        uses: actions/cache@v4
        with:
          path: /opt/tvm
          key: ${{ runner.os }}-libtvm-v0.18.0

      - name: Build libtvm, libtvm_runtime
        if: steps.cache-libtvm.outputs.cache-hit != 'true'
        run: |
          mkdir -p build
          cd build
          cp ../cmake/config.cmake .
          echo set\(USE_SORT ON\) >> config.cmake
          echo set\(USE_RPC ON\) >> config.cmake
          echo set\(USE_MICRO ON\) >> config.cmake
          echo set\(USE_MICRO_STANDALONE_RUNTIME ON\) >> config.cmake
          echo set\(USE_PROFILER ON\) >> config.cmake
          echo set\(USE_LLVM ON\) >> config.cmake
          echo set\(CMAKE_CXX_FLAGS -Werror\) >> config.cmake
          echo set\(USE_CCACHE OFF\) >> config.cmake
          echo set\(BACKTRACE_ON_SEGFAULT ON\) >> config.cmake
          echo set\(USE_UMA OFF\) >> config.cmake
          echo set\(SUMMARIZE ON\) >> config.cmake
          echo set\(INSTALL_DEV ON\) >> config.cmake

          cmake .. -DCMAKE_INSTALL_PREFIX=/opt/tvm
          cmake --build . --config Release
          mkdir /opt/tvm
          cmake --install .

          echo set\(BUILD_STATIC_RUNTIME ON\) >> config.cmake
          cmake .. -DCMAKE_INSTALL_PREFIX=/opt/tvm
          cmake --build . --config Release
          cmake --install .

      - run: find $PYTHONPATH

      - name: add TVM PATH
        run: |
          echo "/opt/tvm" >> "$GITHUB_PATH"
          find /opt/tvm

      - run: rustc --version

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust

      - run: pip install numpy decorator psutil typing_extensions pytest

      - name: tvm-sys test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p tvm-sys --verbose
      - name: tvm-rt test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p tvm-rt --verbose
      - name: tvm test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p tvm --verbose
      - name: basics test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p basics --verbose
      - name: callback test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p callback --verbose
      - name: macros test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p tvm-macros --verbose

      - name: compiler-ext test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p compiler-ext --verbose
      - name: tvm-graph-rt test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p tvm-graph-rt --verbose
      - name: test-rt-tvm-basic test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p test-rt-tvm-basic --verbose
      - name: test-rt-tvm-dso test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p test-rt-tvm-dso --verbose
      - name: test-rt-nn test
        run: |
          cd rust
          export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
          export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
          cargo test -p test-rt-nn --verbose

      # - name: test-rt-wasm32 test
      #   run: |
      #     cd rust
      #     export RUSTFLAGS="-L${TVM_LIBRARY_PATH} ${RUSTFLAGS}"
      #     export LD_LIBRARY_PATH="${TVM_LIBRARY_PATH}"
      #     cargo test -p test-rt-wasm32 --verbose
